?xgb.train #per pi? informazioni
nthreads <- 4 #numero di processori
eta <- 0.01
max.depth <- 3
subsample <- 1
min_child_weight <- 3
col_sample_bytree <- 1
nrounds <- 600
eval.metric <- "auc"
cv.xgb <- xgb.cv(data = dtrain, nthreads = nthreads,
eta = eta, max.depth = max.depth,
subsample = subsample, min_child_weight = min_child_weight,
col_sample_bytree = col_sample_bytree, nrounds = nrounds,
eval.metric = eval.metric, nfold = 10,
stratified = TRUE,
objective = "binary:logistic", prediction = TRUE)
matplot(cv.xgb$evaluation_log$test_auc_mean, type = "l")
max(cv.xgb$evaluation_log$test_auc_mean)
threshold <- seq(0.2, 0.7, 0.001)
F1 <- double(length(threshold))
q <- 0.2
for (i in 1:length(threshold)) {
prediction <- as.numeric(cv.xgb$pred > q) #Le converto in categorie
tt <- table(as.factor(prediction), train.labels.xgb) #creo la tabella
precision <- tt[2,2] / ( tt[2,2] + tt[1,2])
recall <- tt[2,2] / (tt[2,2] + tt[2, 1])
ff <- 2*precision*recall / (precision + recall)
F1[i] <- ff
q <- q + 0.001
}
matplot(threshold, F1, col = 2, type = "l", main = "XGB")
abline(h = max(F1))
max(F1) #0.5488586
q <- threshold[which.max(F1)] #setto la threshold a 0.274
fit.xgb <- xgb.train(data = dtrain, nthreads = nthreads,
eta = eta, max.depth = max.depth,
subsample = subsample, min_child_weight = min_child_weight,
col_sample_bytree = col_sample_bytree, nrounds = nrounds,
eval.metric = eval.metric,
objective = "binary:logistic", watchlist = watchlist)
pred.test <- predict(fit.xgb, dtest) #Ottengo le previsioni (in probabilit?)
prediction.test.xgb <- as.numeric(pred.test > q) #Le converto in categorie
max(F1)
q
TT <- table(as.factor(prediction.test.xgb), test.labels.xgb)
TT
rm(list=ls())
load("C:/Users/ANDREA/Dropbox/Statistica/DMTM/lettura.RData")
load("C:/Users/ANDREA/Dropbox/Statistica/DMTM/functions.RData")
library(naivebayes)
library(caret)
library(ROCR)
library(e1071)
library(Matrix)
require(xgboost)
path <- "C:/Users/ANDREA/Dropbox/Statistica/DMTM/Dataset_Train_NA.csv"
data <- read.csv(path)
data <- standardization(data)
set.seed(27052017)
index <- as.numeric(createDataPartition(data$DEFAULT_PAYMENT_JAN, times = 1,p=2/3, list = FALSE))
train <- data[index, ]
test <- data[-index, ]
x<- as.data.frame(train[,1:23])
y<- as.factor(train$DEFAULT_PAYMENT_JAN)
train$DEFAULT_PAYMENT_JAN<- as.factor(train$DEFAULT_PAYMENT_JAN)
mean(train$LIMIT_BAL[train$DEFAULT_PAYMENT_JAN == 1])
mean(train$LIMIT_BAL[train$DEFAULT_PAYMENT_JAN == 0])
rm(list=ls())
load("C:/Users/ANDREA/Dropbox/Statistica/DMTM/lettura.RData")
load("C:/Users/ANDREA/Dropbox/Statistica/DMTM/functions.RData")
library(naivebayes)
library(caret)
library(ROCR)
library(e1071)
library(Matrix)
require(xgboost)
path <- "C:/Users/ANDREA/Dropbox/Statistica/DMTM/Dataset_Train_NA.csv"
data <- read.csv(path)
set.seed(27052017)
index <- as.numeric(createDataPartition(data$DEFAULT_PAYMENT_JAN, times = 1,p=2/3, list = FALSE))
train <- data[index, ]
test <- data[-index, ]
x<- as.data.frame(train[,1:23])
y<- as.factor(train$DEFAULT_PAYMENT_JAN)
train$DEFAULT_PAYMENT_JAN<- as.factor(train$DEFAULT_PAYMENT_JAN)
mean(train$LIMIT_BAL[train$DEFAULT_PAYMENT_JAN == 1])
mean(train$LIMIT_BAL[train$DEFAULT_PAYMENT_JAN == 0])
mean(train$BILL_AMT_DEC[train$DEFAULT_PAYMENT_JAN == 1])
mean(train$BILL_AMT_DEC[train$DEFAULT_PAYMENT_JAN == 0])
mean(data$BILL_AMT_DEC[train$DEFAULT_PAYMENT_JAN == 1])
mean(data$BILL_AMT_DEC[train$DEFAULT_PAYMENT_JAN == 0])
boxplot(data$"rivers")
boxplot(data$BILL_AMT_DEC ~ data$DEFAULT_PAYMENT_JAN)
median(data$BILL_AMT_DEC[train$DEFAULT_PAYMENT_JAN == 1])
median(data$BILL_AMT_DEC[train$DEFAULT_PAYMENT_JAN == 0])
median(data$LIMIT[train$DEFAULT_PAYMENT_JAN == 1])
median(data$LIMIT[train$DEFAULT_PAYMENT_JAN == 0])
rm(list=ls())
load("C:/Users/ANDREA/Dropbox/Statistica/DMTM/lettura.RData")
load("C:/Users/ANDREA/Dropbox/Statistica/DMTM/functions.RData")
library(naivebayes)
library(caret)
library(ROCR)
library(e1071)
library(Matrix)
require(xgboost)
path <- "C:/Users/ANDREA/Dropbox/Statistica/DMTM/Dataset_Train_NA.csv"
credit_card <- read.csv(path)
set.seed(27052017)
index <- as.numeric(createcredit_cardPartition(credit_card$DEFAULT_PAYMENT_JAN, times = 1,p=2/3, list = FALSE))
train <- credit_card[index, ]
index <- as.numeric(createdatadPartition(credit_card$DEFAULT_PAYMENT_JAN, times = 1,p=2/3, list = FALSE))
index <- as.numeric(createDatadPartition(credit_card$DEFAULT_PAYMENT_JAN, times = 1,p=2/3, list = FALSE))
index <- as.numeric(createDataPartition(credit_card$DEFAULT_PAYMENT_JAN, times = 1,p=2/3, list = FALSE))
train <- credit_card[index, ]
test <- credit_card[-index, ]
x<- as.credit_card.frame(train[,1:23])
y<- as.factor(train$DEFAULT_PAYMENT_JAN)
x<- as.data.frame(train[,1:23])
y<- as.factor(train$DEFAULT_PAYMENT_JAN)
train$DEFAULT_PAYMENT_JAN<- as.factor(train$DEFAULT_PAYMENT_JAN)
median(credit_card$LIMIT[train$DEFAULT_PAYMENT_JAN == 1])
median(credit_card$LIMIT[train$DEFAULT_PAYMENT_JAN == 0])
boxplot(credit_card$BILL_AMT_DEC ~ credit_card$DEFAULT_PAYMENT_JAN)
mode(credit_card$LIMIT[train$DEFAULT_PAYMENT_JAN == 1])
mode(credit_card$LIMIT[train$DEFAULT_PAYMENT_JAN == 1])
?mode
?median
?mean
median(credit_card$LIMIT)
boxplot(credit_card$BILL_AMT_DEC ~ credit_card$DEFAULT_PAYMENT_JAN)
median(credit_card$BILL_AMT_DEC)
median(credit_card$PAY_AMT_DEC)
?qfisher
??qfisher
qfish
?stats
library(help = "stats")
?FDIst
?FDist
alpha <- 0.05
qf(alpha/2, 6, 98, lower.tail = TRUE)
qf(1 - alpha/2, 6, 98, lower.tail = TRUE)
?pvalue
??pvalue
df(30.67, 6, 92)
p1 <- 3; p2 <- 37; N <- 100
RSS1 <- 0.2; RSS2 <- 0.3
df(((N-p2)/(p2-p1))*(RSS1-RSS2)/RSS2, p2-p1, N-p2)
pf(((N-p2)/(p2-p1))*(RSS1-RSS2)/RSS2, p2-p1, N-p2)
((N-p2)/(p2-p1))*(RSS1-RSS2)/RSS2
Fhat <- (N-p2)/(p2-p1) * (RSS1 - RSS2) / RSS1
Fhata
Fhat
RSS1 <- 0.3; RSS2 <- 0.2
Fhat
Fhat <- (N-p2)/(p2-p1) * (RSS1 - RSS2) / RSS1
Fhat
(N-p2) / (p2 - p1)
100-37
37-3
63/34
(RSS1 - RSS2) / RSS2
RSS1 - RSS2
RSS1 <- 0.5
RSS2 <- 0.4
RSS2 <- 0.3
(RSS1 - RSS2) / RSS2
1.852941 * 0.6666667
Fhat <- 1.235294
pf(Fhat, p2-p1, N-p2)
qf(Fhat, p2-p1, N-p2)
1 - pf(Fhat, p2-p1, N-p2)
?qf
alpha <- 0.5
df1 <- 36 - 2
df2 <- 100 - 36
qf <- (alpha/2, df1 = df1, df2 = df2)
qf <- (p = alpha/2, df1 = df1, df2 = df2)
qf(p = alpha/2, df1 = df1, df2 = df2)
qf(p = 1 - alpha/2, df1 = df1, df2 = df2)
remove()
rm()
rm(list <- ls())
-p*log2(p)- q*log2(q)
p <- 3/4
q <- 1 - p
-p*log2(p)- q*log2(q)
p <- 1/5
q <- 1 - p
-p*log2(p)- q*log2(q)
4/9 * 0.81128 + 5/9 * 0.72193
p <- 4/9
q <- 1 - p
-p*log2(p)- q*log2(q)
0.99108-0.76164
p <- 2/5
q <- 1 - p
-p*log2(p)- q*log2(q)
p <- 2/4
q <- 1 - p
-p*log2(p)- q*log2(q)
5/9 * 0.97095 + 4/9 * 1
0.99108 - 0.9838611
help(matrix)
A = matrix(data = c(150, 500, 200, 100), nrow= 2, ncol= 2,
byrow = True,
dimnames = list(c("To Sector 1", "To Sector 2")), c("From Sector 1", "From Sector 2"))
A = matrix(data = c(150, 500, 200, 100), nrow= 2, ncol= 2,
byrow = True)
A = matrix(data = c(150, 500, 200, 100), nrow= 2, ncol= 2,
byrow = TRUE)
A
rownames(A)= c("From Sector 1", "From Sector 2")
colnames(A)= c("To Sector 1", "To Sector 2")
A
X= c(1000, 2000)
alpha = A/X
A
2/233
help(sapply=)
help(sapply)
help(/)
alpha
A / 1000
alpha = A/t(X)
A / 2000
alpha
X[col(A)]
col(A)
row(A)
alpha = A/X[col(A)]
alpha
help(diag)
help(id)
help(ones)
diag(2)
dim(A)
#Matrix Z of an economy with two sectors
Z = matrix(data = c(150, 500, 200, 100), nrow= 2, ncol= 2,
byrow = TRUE)
rownames(A)= c("From Sector 1", "From Sector 2")
colnames(A)= c("To Sector 1", "To Sector 2")
#Totaly quantities of goods produced
X= c(1000, 2000)
#Matrix A of the technical coefficients
A = Z/X[col(Z)]
dim(A)
dim(A)[1]
#Computing the Leontief inverse
L= (diag(dim(A)[1]) - A)
Linv= inv(L)
Linv= solve(L)
L %*% Linv
L
assert(det(L) != 0)
Linv
#The demand at year 0 is
Y_old= c(350, 1700)
round(Y - L %*% X, 2)
round(Y_old - L %*% X, 2)
#Now suppose that at year 1 we know we will have
Y_new= c(600, 1500)
X_new= Linv %*% Y_new
X_new
install.packages("tidyverse")
install.packages("compositional")
install.packages("Compositional")
install.packages("compositions")
install.packages("robCompositions")
install.packages("compositionsGUI")
ICIO2016A<-ICIO2016Z #input coefficient
load ("ICIO2016obj1.Rdata")
load ("ICIO2016obj2.Rdata")
load ("ICIO2016obj1.Rdata")
load ("ICIO2016obj2.Rdata")
load("ICIO/initial2016.Rdata")
library(tidyverse)
mpg
help(mph)
help(mpg)
?mph
?mpg
#creating plots
ggplot(data= mpg)
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy)
)
mp
mpg
?mtcars
?mpg
ggplot(data= mpg) + geom_point(mapping= aes(x= hwy, y= cyl))
ggplot(data= mpg) + geom_point(mapping= aes(y= hwy, x= cyl))
library(tidyverse)
mpg
#creating plots
ggplot(data= mpg)
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy))
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= class))
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, size= class))
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, alpha= class))
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, shape= class))
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= class))
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= displ))
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, size= displ))
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, alpha= displ))
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= displ))
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= displ), colour= 'red')
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= displ)
)
help(<chr>)
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= displ, shape= class)
)
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= displ, shape= year))
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= displ, shape= manufacturer))
load("C:/Users/ANDREA/OneDrive - Politecnico di Milano/PoliMi/Magistrale/Tesi/Dati/ICIO/initial2016.Rdata")
View(concixei)
View(concixei)
install.packages("igraph")
mpg
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= class)) + facet_wrap(drv)
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= class)) + facet_wrap(mpg$drv)
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= class))
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= class)) + facet_wrap(~ drv)
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= class)) + facet_wrap(~ class)
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= class)) + facet_grid(drv ~ model)
ggplot(data= mpg) + geom_point(mapping= aes(x= displ, y= hwy, colour= class)) + facet_grid(drv ~ manufacturer)
#creating plots
ggplot(data= mpg, mapping= aes(x= displ, y= hwy)) +
geom_point() +
geom_smooth(mapping= aes(linetype= drv))
#creating plots
ggplot(data= mpg, mapping= aes(x= displ, y= hwy)) +
geom_point() +
geom_smooth(mapping= aes(linetype= ~ drv))
#creating plots
ggplot(data= mpg, mapping= aes(x= displ, y= hwy)) +
geom_point() +
geom_smooth(linetype= drv)
#creating plots
ggplot(data= mpg, mapping= aes(x= displ, y= hwy)) +
geom_point() +
geom_smooth(linetype= ~ drv)
#creating plots
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
#creating plots
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, colour= drv))
ggplot(data= mpg, mapping= aes(x= displ, y= hwy)) +
geom_point() +
geom_smooth(mapping= aes(linetype= drv))
ggplot(data= mpg, mapping= aes(x= displ, y= hwy, colour= drv)) +
geom_point() +
geom_smooth(mapping= aes(linetype= drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
?geom_bar
lambda x: x + y
lambda
?lambda
mpg
select(mpg, model == a4)
filter(mpg, model == a4)
filter(mpg, model == "a4")
filter(mpg, year %in% seq(2000 , 2001))
seq(2000, 2001)
seq(2000, 20010)
seq(2000, 2010)
filter(mpg, year %in% seq(2000 , 2010))
select(filter(mpg, year %in% seq(2000 , 2010)), class)
mpg_small <- select(mpg, manufacturer, cyl, cty, hwy)
View(mpg_small)
ggplot(mpg_small, mapping = aes(x = cyl, y = hwy, colour = manufacturer)) +
geom_point() +
geom_smooth()
is.na(2)
is.na(NA)
x <- c(1, 2, 3)
y <- 3
x + y
x - y
x * y
y * x
y *%* x
y <- c(1, 2, 3)
x *%* y
x %*% y
x %*% x
x %*% x + y
as.vector(x %*% x) + y
q()
function doubleTrouble(x)
{
print("The double of %d", x)
print("is ", x*x)
}
function doubleTrouble(x)
function doubleTrouble(double x)
seq(1, 10, 1)
runif(1, 10, 1)
runif(1, 10)
library(nycflights13)
library(tidyverse)
install.packages("nycflights13")
install.packages(c("callr", "car", "dbplyr", "digest", "e1071", "energy", "fansi", "igraph", "kernlab", "lme4", "maptools", "openssl", "pkgconfig", "pls", "processx", "Rcpp", "RcppArmadillo", "rlang", "robustbase", "scales", "stringi", "tensorA", "tinytex", "yaml"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(readr)
data <- read_csv("C:/Users/ANDREA/Desktop/FIGARO_IOP.csv")
head(data)
type(data)
colnames(data)
rownames(data)
colnames(data) <- data[1, ]
data <- read_csv("C:/Users/ANDREA/Desktop/FIGARO_IOP.csv")
rownames(data) <- data[1, ]
library(tidyverse)
dir()
setwd("~/PACS/apc")
dir()
results <- read_csv("test/data_games")
results <- read_csv("./test/data_games")
results <- read_csv("./test/data_games.csv", col_names = TRUE)
View(results)
nim <- results %>%
filter(GAME = "nim")
nim <- results %>%
filter(GAME == "nim")
oxo <- results %>%
filter(GAME == "oxo")
View(nim)
?select
oxo <- results %>%
filter(GAME == "oxo") %>%
select(-N_DRAW)
View(oxo)
nim <- results %>%
filter(GAME == "nim") %>%
select(-N_DRAW)
oxo <- results %>%
filter(GAME == "oxo")
View(nim)
nim <- results %>%
filter(GAME == "nim") %>%
select(-c(GAME, N_DRAW))
#Creating the Nim dataset
nim <- results %>%
filter(GAME == "nim") %>%
select(-c(GAME, N_DRAW))
#Creating the Nim dataset
nim <- results %>%
filter(GAME == "nim") %>%
select(-c(GAME, N_MATCH, N_DRAW))
ggplot(data = nim) +
geom_point(mapping = aes(x = IN_ITER, y = OUT_ITER, colour = PLAYER, shape = N_WIN))
ggplot(data = nim) +
geom_point(mapping = aes(x = IN_ITER, y = OUT_ITER, colour = PLAYER, size = N_WIN))
ggplot(data = nim) +
geom_point(mapping = aes(x = IN_ITER, y = OUT_ITER, colour = PLAYER, size = N_WIN)) +
geom_jitter()
ggplot(data = nim) +
geom_point(mapping = aes(x = IN_ITER, y = OUT_ITER, colour = PLAYER, size = N_WIN))
ggplot(data = nim) +
geom_jitter() +
geom_point(mapping = aes(x = IN_ITER, y = OUT_ITER, colour = PLAYER, size = N_WIN))
ggplot(data = nim) +
geom_point(mapping = aes(x = IN_ITER, y = OUT_ITER, colour = PLAYER, size = N_WIN), position = "jitter")
ggplot(data = nim) +
geom_point(mapping = aes(x = IN_ITER, y = OUT_ITER, shape = PLAYER, size = N_WIN), position = "jitter")
#Plotting for the first Nim player
nim %>%
filter(PLAYER == 1) %>%
ggplot(data = nim) +
geom_point(mapping = aes(x = IN_ITER, y = OUT_ITER, size = N_WIN), position = "jitter")
#Plotting for the first Nim player
nim %>%
filter(PLAYER == 1) %>%
ggplot() +
geom_point(mapping = aes(x = IN_ITER, y = OUT_ITER, size = N_WIN), position = "jitter")
#Plotting for the first Nim player
nim %>%
filter(PLAYER == 1) %>%
ggplot() +
geom_point(mapping = aes(x = IN_ITER, y = OUT_ITER, size = N_WIN), alpha = 0.80, position = "jitter")
#Plotting for the first Nim player
nim %>%
filter(PLAYER == 1) %>%
ggplot() +
geom_point(mapping = aes(x = IN_ITER, y = N_WIN), alpha = 0.80, position = "jitter") +
facet_grid(rows = OUT_ITER)
#Plotting for the first Nim player
nim %>%
filter(PLAYER == 1) %>%
ggplot() +
geom_point(mapping = aes(x = IN_ITER, y = N_WIN), alpha = 0.80, position = "jitter") +
facet_grid(OUT_ITER)
#Plotting for the first Nim player
nim %>%
filter(PLAYER == 1) %>%
ggplot() +
geom_point(mapping = aes(x = IN_ITER, y = N_WIN), alpha = 0.80, position = "jitter") +
facet_wrap(OUT_ITER)
#Plotting for the first Nim player
nim %>%
filter(PLAYER == 1) %>%
ggplot() +
geom_point(mapping = aes(x = IN_ITER, y = N_WIN), alpha = 0.80, position = "jitter") +
facet_wrap(~ OUT_ITER)
